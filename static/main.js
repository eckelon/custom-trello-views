!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/static/",n(n.s=2)}([function(t,e,n){
/* Riot v3.13.2, @license MIT */
!function(t){"use strict";function e(t,e){return(e||document).querySelector(t)}var n,r,i=[],o={},s="yield",a="__global_mixin",l="riot-",u=["ref","data-ref"],f="data-is",c="if",p="each",d="no-reorder",h="show",v="hide",g="key",m="__riot-events__",_="string",b="object",y="undefined",w="function",O="http://www.w3.org/1999/xlink",L="http://www.w3.org/2000/svg",C=/^xlink:(\w+)/,N=typeof window===y?void 0:window,E=/^on/,M=/([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,S={viewbox:"viewBox",preserveaspectratio:"preserveAspectRatio"},F=/^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,A=0|(N&&N.document||{}).documentMode;function B(t){return"svg"===t?document.createElementNS(L,t):document.createElement(t)}function j(t,e,n){var r=C.exec(e);r&&r[1]?t.setAttributeNS(O,r[1],n):t.setAttribute(e,n)}var P,U,H={},z=!1;N&&(P=B("style"),U=e("style[type=riot]"),j(P,"type","text/css"),U?(U.id&&(P.id=U.id),U.parentNode.replaceChild(P,U)):document.head.appendChild(P),r=(n=P).styleSheet);var T={styleNode:n,add:function(t,e){H[e]=t,z=!0},inject:function(){if(N&&z){z=!1;var t=Object.keys(H).map(function(t){return H[t]}).join("\n");r?r.cssText=t:n.innerHTML=t}},remove:function(t){delete H[t],z=!0}},x=function(){var t="[{(,;:?=|&!^~>%*/",e=["case","default","do","else","in","instanceof","prefix","return","typeof","void","yield"],n=e.reduce(function(t,e){return t+e.slice(-1)},""),r=/^\/(?=[^*>\/])[^[\/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\\/]*)*?\/[gimuy]*/,i=/[$\w]/;function o(t,e){for(;--e>=0&&/\s/.test(t[e]););return e}return function(s,a){var l=/.*/g,u=l.lastIndex=a++,f=l.exec(s)[0].match(r);if(f){var c=u+f[0].length;u=o(s,u);var p=s[u];if(u<0||~t.indexOf(p))return c;if("."===p)"."===s[u-1]&&(a=c);else if("+"===p||"-"===p)(s[--u]!==p||(u=o(s,u))<0||!i.test(s[u]))&&(a=c);else if(~n.indexOf(p)){for(var d=u+1;--u>=0&&i.test(s[u]););~e.indexOf(s.slice(u+1,d))&&(a=c)}}return a}}(),W=function(t){var e,n,r="g",i=/"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,o=i.source+"|"+/(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source+"|"+/\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,s=RegExp("[\\x00-\\x1F<>a-zA-Z0-9'\",;\\\\]"),a=/(?=[[\]()*+?.^$|])/g,l=i.source+"|"+/(\/)(?![*\/])/.source,u={"(":RegExp("([()])|"+l,r),"[":RegExp("([[\\]])|"+l,r),"{":RegExp("([{}])|"+l,r)},f="{ }",c=["{","}","{","}",/{[^}]*}/,/\\([{}])/g,/\\({)|{/g,RegExp("\\\\(})|([[({])|(})|"+l,r),f,/^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,/(^|[^\\]){=[\S\s]*?}/],p=void 0,d=[];function h(t){return t}function v(t,e){return e||(e=d),new RegExp(t.source.replace(/{/g,e[2]).replace(/}/g,e[3]),t.global?r:"")}function g(t){if(t===f)return c;var e=t.split(" ");if(2!==e.length||s.test(t))throw new Error('Unsupported brackets "'+t+'"');return(e=e.concat(t.replace(a,"\\").split(" ")))[4]=v(e[1].length>1?/{[\S\s]*?}/:c[4],e),e[5]=v(t.length>3?/\\({|})/g:c[5],e),e[6]=v(c[6],e),e[7]=RegExp("\\\\("+e[3]+")|([[({])|("+e[3]+")|"+l,r),e[8]=t,e}function m(t){return t instanceof RegExp?e(t):d[t]}function _(t){(t||(t=f))!==d[8]&&(d=g(t),e=t===f?h:v,d[9]=e(c[9])),p=t}return m.split=function(t,e,n){n||(n=d);var r,i,o,s,a,l,f=[],c=n[6],p=[],h="";for(i=o=c.lastIndex=0;r=c.exec(t);){if(l=c.lastIndex,s=r.index,i){if(r[2]){var v=r[2],g=u[v],m=1;for(g.lastIndex=l;r=g.exec(t);)if(r[1]){if(r[1]===v)++m;else if(!--m)break}else g.lastIndex=b(r.index,g.lastIndex,r[2]);c.lastIndex=m?t.length:g.lastIndex;continue}if(!r[3]){c.lastIndex=b(s,l,r[4]);continue}}r[1]||(_(t.slice(o,s)),o=c.lastIndex,(c=n[6+(i^=1)]).lastIndex=o)}return t&&o<t.length&&_(t.slice(o)),f.qblocks=p,f;function _(t){h&&(t=h+t,h=""),e||i?f.push(t&&t.replace(n[5],"$1")):f.push(t)}function b(n,r,i){return i&&(r=x(t,n)),e&&r>n+2&&(a="⁗"+p.length+"~",p.push(t.slice(n,r)),h+=t.slice(o,n)+a,o=r),r}},m.hasExpr=function(t){return d[4].test(t)},m.loopKeys=function(t){var e=t.match(d[9]);return e?{key:e[1],pos:e[2],val:d[0]+e[3].trim()+d[1]}:{val:t.trim()}},m.array=function(t){return t?g(t):d},Object.defineProperty(m,"settings",{set:function(t){var e;e=(t=t||{}).brackets,Object.defineProperty(t,"brackets",{set:_,get:function(){return p},enumerable:!0}),n=t,_(e)},get:function(){return n}}),m.settings="undefined"!=typeof riot&&riot.settings||{},m.set=_,m.skipRegex=x,m.R_STRINGS=i,m.R_MLCOMMS=/\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,m.S_QBLOCKS=o,m.S_QBLOCK2=l,m}(),D=function(){var t={};function e(i,o){return i?(t[i]||(t[i]=function(t){var e=function(t){var e,i=W.split(t.replace(n,'"'),1),o=i.qblocks;if(i.length>2||i[0]){var a,l,u=[];for(a=l=0;a<i.length;++a)(e=i[a])&&(e=1&a?s(e,1,o):'"'+e.replace(/\\/g,"\\\\").replace(/\r\n?|\n/g,"\\n").replace(/"/g,'\\"')+'"')&&(u[l++]=e);e=l<2?u[0]:"["+u.join(",")+'].join("")'}else e=s(i[1],0,o);return o.length&&(e=e.replace(r,function(t,e){return o[e].replace(/\r/g,"\\r").replace(/\n/g,"\\n")})),e}(t);return"try{return "!==e.slice(0,11)&&(e="return "+e),new Function("E",e+";")}(i))).call(o,function(t,n){t.riotData={tagName:n&&n.__&&n.__.tagName,_riot_id:n&&n._riot_id},e.errorHandler?e.errorHandler(t):"undefined"!=typeof console&&"function"==typeof console.error&&(console.error(t.message),console.log("<%s> %s",t.riotData.tagName||"Unknown tag",this.tmpl),console.log(this.data))}.bind({data:o,tmpl:i})):i}e.hasExpr=W.hasExpr,e.loopKeys=W.loopKeys,e.clearCache=function(){t={}},e.errorHandler=null;var n=/\u2057/g,r=/\u2057(\d+)~/g,i=/^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/,o={"(":/[()]/g,"[":/[[\]]/g,"{":/[{}]/g};function s(t,e,n){if(t=t.replace(/\s+/g," ").trim().replace(/\ ?([[\({},?\.:])\ ?/g,"$1")){for(var r,s=[],a=0;t&&(r=t.match(i))&&!r.index;){var l,u,c=/,|([[{(])|$/g;for(t=RegExp.rightContext,l=r[2]?n[r[2]].slice(1,-1).trim().replace(/\s+/g," "):r[1];u=(r=c.exec(t))[1];)p(u,c);u=t.slice(0,r.index),t=RegExp.rightContext,s[a++]=f(u,1,l)}t=a?a>1?"["+s.join(",")+'].join(" ").trim()':s[0]:f(t,e)}return t;function p(e,n){var r,i=1,s=o[e];for(s.lastIndex=n.lastIndex;r=s.exec(t);)if(r[0]===e)++i;else if(!--i)break;n.lastIndex=i?t.length:s.lastIndex}}var a='"in this?this:'+("object"!=typeof window?"global":"window")+").",l=/[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,u=/^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;function f(t,e,n){var r;return t=t.replace(l,function(t,e,n,i,o){return n&&(i=r?0:i+t.length,"this"!==n&&"global"!==n&&"window"!==n?(t=e+'("'+n+a+n,i&&(r="."===(o=o[i])||"("===o||"["===o)):i&&(r=!u.test(o.slice(i)))),t}),r&&(t="try{return "+t+"}catch(e){E(e,this)}"),n?t=(r?"function(){"+t+"}.call(this)":"("+t+")")+'?"'+n+'":""':e&&(t="function(v){"+(r?t.replace("return ","v="):"v=("+t+")")+';return v||v===0?v:""}.call(this)'),t}return e.version=W.version="v3.0.8",e}(),R=function(t){t=t||{};var e={},n=Array.prototype.slice;return Object.defineProperties(t,{on:{value:function(n,r){return"function"==typeof r&&(e[n]=e[n]||[]).push(r),t},enumerable:!1,writable:!1,configurable:!1},off:{value:function(n,r){if("*"!=n||r)if(r)for(var i,o=e[n],s=0;i=o&&o[s];++s)i==r&&o.splice(s--,1);else delete e[n];else e={};return t},enumerable:!1,writable:!1,configurable:!1},one:{value:function(e,n){return t.on(e,function r(){t.off(e,r),n.apply(t,arguments)})},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(r){var i,o,s,a=arguments,l=arguments.length-1,u=new Array(l);for(s=0;s<l;s++)u[s]=a[s+1];for(i=n.call(e[r]||[],0),s=0;o=i[s];++s)o.apply(t,u);return e["*"]&&"*"!=r&&t.trigger.apply(t,["*",r].concat(u)),t},enumerable:!1,writable:!1,configurable:!1}}),t};function q(t,e){return Object.getOwnPropertyDescriptor(t,e)}function Z(t){return typeof t===y}function Q(t,e){var n=q(t,e);return Z(t[e])||n&&n.writable}function $(t){for(var e,n=1,r=arguments,i=r.length;n<i;n++)if(e=r[n])for(var o in e)Q(t,o)&&(t[o]=e[o]);return t}function k(t){return Object.create(t)}var X=$(k(W.settings),{skipAnonymousTags:!0,keepValueAttributes:!1,autoUpdate:!0});function Y(t,e){return[].slice.call((e||document).querySelectorAll(t))}function G(){return document.createTextNode("")}function J(t,e){t.style.display=e?"":"none",t.hidden=!e}function K(t,e){return t.getAttribute(e)}function V(t,e){t.removeAttribute(e)}function I(t,e,n){if(n){var r=t.ownerDocument.importNode((new DOMParser).parseFromString('<svg xmlns="'+L+'">'+e+"</svg>","application/xml").documentElement,!0);t.appendChild(r)}else t.innerHTML=e}function tt(t,e){if(t)for(var n;n=M.exec(t);)e(n[1].toLowerCase(),n[2]||n[3]||n[4])}function et(){return document.createDocumentFragment()}function nt(t,e,n){t.insertBefore(e,n.parentNode&&n)}function rt(t){return Object.keys(t).reduce(function(e,n){return e+" "+n+": "+t[n]+";"},"")}function it(t,e,n){if(t){var r,i=e(t,n);if(!1===i)return;for(t=t.firstChild;t;)r=t.nextSibling,it(t,e,i),t=r}}var ot=Object.freeze({$$:Y,$:e,createDOMPlaceholder:G,mkEl:B,setAttr:j,toggleVisibility:J,getAttr:K,remAttr:V,setInnerHTML:I,walkAttrs:tt,createFrag:et,safeInsert:nt,styleObjectToString:rt,walkNodes:it});function st(t){return Z(t)||null===t}function at(t){return st(t)||""===t}function lt(t){return typeof t===w}function ut(t){return t&&typeof t===b}function ft(t){var e=t.ownerSVGElement;return!!e||null===e}function ct(t){return Array.isArray(t)||t instanceof Array}function pt(t){return F.test(t)}function dt(t){return typeof t===_}var ht=Object.freeze({isBlank:at,isFunction:lt,isObject:ut,isSvg:ft,isWritable:Q,isArray:ct,isBoolAttr:pt,isNil:st,isString:dt,isUndefined:Z});function vt(t,e){return-1!==t.indexOf(e)}function gt(t,e){for(var n=t?t.length:0,r=0;r<n;r++)e(t[r],r);return t}function mt(t,e){return t.slice(0,e.length)===e}var _t,bt=(_t=-1,function(){return++_t});function yt(t,e,n,r){return Object.defineProperty(t,e,$({value:n,enumerable:!1,writable:!1,configurable:!0},r)),t}function wt(t){return t.replace(/-(\w)/g,function(t,e){return e.toUpperCase()})}function Ot(t){console&&console.warn&&console.warn(t)}var Lt=Object.freeze({contains:vt,each:gt,getPropDescriptor:q,startsWith:mt,uid:bt,defineProperty:yt,objectCreate:k,extend:$,toCamel:wt,warn:Ot});function Ct(t,e,n,r,i){var o=t[e],s=ct(o),a=!Z(i);if(!o||o!==n)if(!o&&r)t[e]=[n];else if(o)if(s){var l=o.indexOf(n);if(l===i)return;-1!==l&&o.splice(l,1),a?o.splice(i,0,n):o.push(n)}else t[e]=[o,n];else t[e]=n}function Nt(t){return t.tagName&&o[K(t,f)||K(t,f)||t.tagName.toLowerCase()]}function Et(t,e){var n=Nt(t),r=!e&&K(t,f);return r&&!D.hasExpr(r)?r:n?n.name:t.tagName.toLowerCase()}function Mt(){return this.parent?$(k(this),this.parent):this}var St=/<yield\b/i,Ft=/<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi,At=/<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi,Bt=/<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi,jt={tr:"tbody",th:"tr",td:"tr",col:"colgroup"},Pt=A&&A<10?/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/:/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/,Ut="div",Ht="svg";function zt(t,n,r){var i=t&&t.match(/^\s*<([-\w]+)/),o=i&&i[1].toLowerCase(),s=B(r?Ht:Ut);return t=function(t,e){if(!St.test(t))return t;var n={};return e=e&&e.replace(At,function(t,e,r){return n[e]=n[e]||r,""}).trim(),t.replace(Bt,function(t,e,r){return n[e]||r||""}).replace(Ft,function(t,n){return e||n||""})}(t,n),Pt.test(o)?s=function(t,n,r){var i="o"===r[0],o=i?"select>":"table>";if(t.innerHTML="<"+o+n.trim()+"</"+o,o=t.firstChild,i)o.selectedIndex=-1;else{var s=jt[r];s&&1===o.childElementCount&&(o=e(s,o))}return o}(s,t,o):I(s,t,r),s}var Tt=/^on/;function xt(t){for(var e=t;e.__.isAnonymous&&e.parent;)e=e.parent;return e}function Wt(t,e,n,r){var i,o=function(t,e,n){var r=this.__.parent,i=this.__.item;if(!i)for(;r&&!i;)i=r.__.item,r=r.__.parent;if(Q(n,"currentTarget")&&(n.currentTarget=t),Q(n,"target")&&(n.target=n.srcElement),Q(n,"which")&&(n.which=n.charCode||n.keyCode),n.item=i,e.call(this,n),X.autoUpdate&&!n.preventUpdate){var o=xt(this);o.isMounted&&o.update()}}.bind(r,n,e);n[t]=null,i=t.replace(E,""),vt(r.__.listeners,n)||r.__.listeners.push(n),n[m]||(n[m]={}),n[m][t]&&n.removeEventListener(i,n[m][t]),n[m][t]=o,n.addEventListener(i,o,!1)}function Dt(t,e,n,r){var i=_e(t,e,n),o=e.tagName||Et(e.root,!0),s=xt(r);return yt(i,"parent",s),i.__.parent=r,Ct(s.tags,o,i),s!==r&&Ct(r.tags,o,i),i}function Rt(t,e,n,r){if(ct(t[e])){var i=t[e].indexOf(n);-1!==i&&t[e].splice(i,1),t[e].length?1!==t[e].length||r||(t[e]=t[e][0]):delete t[e]}else t[e]===n&&delete t[e]}function qt(t,e){var n,r,i=G(),o=G(),s=et();for(this.root.insertBefore(i,this.root.firstChild),this.root.appendChild(o),this.__.head=r=i,this.__.tail=o;r;)n=r.nextSibling,s.appendChild(r),this.__.virts.push(r),r=n;e?t.insertBefore(s,e.__.head):t.appendChild(s)}function Zt(t,e){if(e.parentNode){var n=et();qt.call(t,n),e.parentNode.replaceChild(n,e)}}function Qt(t){if(!this.root||!K(this.root,"virtualized")){var e,n=t.dom,r=function(t){return t?(t=t.replace(l,""),S[t]&&(t=S[t]),t):null}(t.attr),i=vt([h,v],r),s=t.root&&"VIRTUAL"===t.root.tagName,a=this.__,u=a.isAnonymous,f=n&&(t.parent||n.parentNode),c=X.keepValueAttributes,p="style"===r,d="class"===r,g="value"===r;if(t._riot_id)t.__.wasCreated?t.update():(t.mount(),s&&Zt(t,t.root));else{if(t.update)return t.update();var m=i&&!u?Mt.call(this):this,_=!at(e=D(t.expr,m)),b=ut(e);if(b&&(d?e=D(JSON.stringify(e),this):p&&(e=rt(e))),!t.attr||t.wasParsedOnce&&!1!==e&&(_||g&&(!g||c))||V(n,K(n,t.attr)?t.attr:r),t.bool&&(e=!!e&&r),t.isRtag)return function(t,e,n){var r,i=t.tag||t.dom._tag,s=(i?i.__:{}).head,a="VIRTUAL"===t.dom.tagName;i&&t.tagName===n?i.update():(i&&(a&&(r=G(),s.parentNode.insertBefore(r,s)),i.unmount(!0)),dt(n)&&(t.impl=o[n],t.impl&&(t.tag=i=Dt(t.impl,{root:t.dom,parent:e,tagName:n},t.dom.innerHTML,e),gt(t.attrs,function(t){return j(i.root,t.name,t.value)}),t.tagName=n,i.mount(),a&&Zt(i,r||i.root),e.__.onUnmount=function(){var t=i.opts.dataIs;Rt(i.parent.tags,t,i),Rt(i.__.parent.tags,t,i),i.unmount()})))}(t,this,e);if((!t.wasParsedOnce||t.value!==e)&&(t.value=e,t.wasParsedOnce=!0,!b||d||p||i)){if(_||(e=""),!r)return e+="",void(f&&(t.parent=f,"TEXTAREA"===f.tagName?(f.value=e,A||(n.nodeValue=e)):n.nodeValue=e));switch(!0){case lt(e):y=r,Tt.test(y)&&Wt(r,e,n,this);break;case i:J(n,r===v?!e:e);break;default:t.bool&&(n[r]=e),g&&n.value!==e?n.value=e:_&&!1!==e&&j(n,r,e),p&&n.hidden&&J(n,!1)}var y}}}}function $t(t){gt(t,Qt.bind(this))}function kt(t,e,n,r,i){if(!t||!n){var o=t?Mt.call(this):e||this;gt(i,function(t){t.expr&&Qt.call(o,t.expr),r[wt(t.name).replace(l,"")]=t.expr?t.expr.value:t.value})}}function Xt(t){if(!t){var e=Object.keys(o);return e+Xt(e)}return t.filter(function(t){return!/[^-\w]/.test(t)}).reduce(function(t,e){var n=e.trim().toLowerCase();return t+",["+f+'="'+n+'"]'},"")}function Yt(t,e){var n=this.name,r=this.tmpl,i=this.css,s=this.attrs,a=this.onCreate;return o[n]||(Gt(n,r,i,s,a),o[n].class=this.constructor),be(t,n,e,this),i&&T.inject(),this}function Gt(t,e,n,r,i){return lt(r)&&(i=r,/^[\w-]+\s?=/.test(n)?(r=n,n=""):r=""),n&&(lt(n)?i=n:T.add(n,t)),t=t.toLowerCase(),o[t]={name:t,tmpl:e,attrs:r,fn:i},t}function Jt(t,e,n,r,i){return n&&T.add(n,t),o[t]={name:t,tmpl:e,attrs:r,fn:i},t}function Kt(t,e,n){var r,i,o=[];if(T.inject(),(ut(e)||lt(e))&&(n=e,e=0),dt(t)?(t="*"===t?i=Xt():t+Xt(t.split(/, */)),r=t?Y(t):[]):r=t,"*"===e){if(e=i||Xt(),r.tagName)r=Y(e,r);else{var s=[];gt(r,function(t){return s.push(Y(e,t))}),r=s}e=0}return function t(r){if(r.tagName){var i,s=K(r,f);e&&s!==e&&(s=e,j(r,f,e)),(i=be(r,s||r.tagName.toLowerCase(),lt(n)?n():n))&&o.push(i)}else r.length&&gt(r,t)}(r),o}var Vt={},It=Vt[a]={},te=0;function ee(t,e,n){if(ut(t))ee("__"+te+++"__",t,!0);else{var r=n?It:Vt;if(!e){if(Z(r[t]))throw new Error("Unregistered mixin: "+t);return r[t]}r[t]=lt(e)?$(e.prototype,r[t]||{})&&e:$(r[t]||{},e)}}function ne(){return gt(i,function(t){return t.update()})}function re(t){return T.remove(t),delete o[t]}var ie=Object.freeze({Tag:Yt,tag:Gt,tag2:Jt,mount:Kt,mixin:ee,update:ne,unregister:re,version:"v3.13.2"});function oe(t,e){var n,r=this.parent;r&&(ct(n=r.tags[t])?n.splice(e,0,n.splice(n.indexOf(this),1)[0]):Ct(r.tags,t,this))}function se(t,e){for(var n,r=this.__.head,i=et();r;)if(n=r.nextSibling,i.appendChild(r),(r=n)===this.__.tail){i.appendChild(r),t.insertBefore(i,e.__.head);break}}function ae(t,e,n){var r={};return r[t.key]=e,t.pos&&(r[t.pos]=n),r}function le(t,e){t.splice(e,1),this.unmount(),Rt(this.parent,this,this.__.tagName,!0)}function ue(t,e,n){var r=typeof K(t,d)!==_||V(t,d),i=K(t,g),s=!!i&&D.hasExpr(i),a=Et(t),l=o[a],u=t.parentNode,f=G(),h=Nt(t),v=K(t,c),m=[],y=t.innerHTML,w=!o[a],O="VIRTUAL"===t.tagName,L=[];return V(t,p),V(t,g),(n=D.loopKeys(n)).isLoop=!0,v&&V(t,c),u.insertBefore(f,t),u.removeChild(t),n.update=function(){n.value=D(n.val,e);var o=n.value,u=et(),c=!ct(o)&&!dt(o),p=f.parentNode,d=[],g=c&&!!o;if(p){c&&(o=o?Object.keys(o).map(function(t){return ae(n,o[t],t)}):[]);var _=0;gt(o,function(f,C){var N=C-_,E=!g&&n.key?ae(n,f,C):f;if(!v||D(v,$(k(e),E))){var M=function(t,e,n,r){return t?r?D(t,n):e[t]:e}(i,f,E,s),S=!c&&r&&typeof f===b||i,F=L.indexOf(M),A=-1===F,B=!A&&S?F:N,j=m[B],P=N>=L.length,U=S&&A||!S&&!j||!m[N];U?((j=_e(l,{parent:e,isLoop:!0,isAnonymous:w,tagName:a,root:t.cloneNode(w),item:E,index:N},y)).mount(),P?function(t,e){e?qt.call(this,t):t.appendChild(this.root)}.apply(j,[u||p,O]):function(t,e,n){n?qt.apply(this,[t,e]):nt(t,this.root,e.root)}.apply(j,[p,m[N],O]),P||L.splice(N,0,E),m.splice(N,0,j),h&&Ct(e.tags,a,j,!0)):B!==N&&S&&((i||vt(o,L[B]))&&(function(t,e,n){n?se.apply(this,[t,e]):nt(t,this.root,e.root)}.apply(j,[p,m[N],O]),m.splice(N,0,m.splice(B,1)[0]),L.splice(N,0,L.splice(B,1)[0])),n.pos&&(j[n.pos]=N),!h&&j.tags&&function(t){var e=this;gt(Object.keys(this.tags),function(n){oe.apply(e.tags[n],[n,t])})}.call(j,N)),$(j.__,{item:E,index:N,parent:e}),d[N]=M,U||j.update(E)}else _++}),function(t,e,n){for(var r=e.length,i=t.length-n;r>i;)r--,le.apply(e[r],[e,r])}(o,m,_),L=d.slice(),p.insertBefore(u,f)}},n.unmount=function(){gt(m,function(t){t.unmount()})},n}var fe={init:function(t,e,n,r){return this.dom=t,this.attr=n,this.rawValue=r,this.parent=e,this.hasExp=D.hasExpr(r),this},update:function(){var t=this.value,e=this.parent&&xt(this.parent),n=this.dom.__ref||this.tag||this.dom;this.value=this.hasExp?D(this.rawValue,this.parent):this.rawValue,!at(t)&&e&&Rt(e.refs,t,n),!at(this.value)&&dt(this.value)?(e&&Ct(e.refs,this.value,n,null,this.parent.__.index),this.value!==t&&j(this.dom,this.attr,this.value)):V(this.dom,this.attr),this.dom.__ref||(this.dom.__ref=n)},unmount:function(){var t=this.tag||this.dom,e=this.parent&&xt(this.parent);!at(this.value)&&e&&Rt(e.refs,this.value,t)}};function ce(t,e,n,r){return k(fe).init(t,e,n,r)}function pe(t){gt(t,function(t){t.unmount?t.unmount(!0):t.tagName?t.tag.unmount(!0):t.unmount&&t.unmount()})}var de={init:function(t,e,n){V(t,c),$(this,{tag:e,expr:n,stub:G(),pristine:t});var r=t.parentNode;return r.insertBefore(this.stub,t),r.removeChild(t),this},update:function(){this.value=D(this.expr,this.tag),this.stub.parentNode&&(this.value&&!this.current?(this.current=this.pristine.cloneNode(!0),this.stub.parentNode.insertBefore(this.current,this.stub),this.expressions=ve.apply(this.tag,[this.current,!0])):!this.value&&this.current&&(this.unmount(),this.current=null,this.expressions=[]),this.value&&$t.call(this.tag,this.expressions))},unmount:function(){this.current&&(this.current._tag?this.current._tag.unmount():this.current.parentNode&&this.current.parentNode.removeChild(this.current)),pe(this.expressions||[])}};function he(t,e,n){return k(de).init(t,e,n)}function ve(t,e){var n=this,r=[];return it(t,function(i){var o,s,a=i.nodeType;if((e||i!==t)&&(3===a&&"STYLE"!==i.parentNode.tagName&&D.hasExpr(i.nodeValue)&&r.push({dom:i,expr:i.nodeValue}),1===a)){var l="VIRTUAL"===i.tagName;if(o=K(i,p))return l&&j(i,"loopVirtual",!0),r.push(ue(i,n,o)),!1;if(o=K(i,c))return r.push(he(i,n,o)),!1;if((o=K(i,f))&&D.hasExpr(o))return r.push({isRtag:!0,expr:o,dom:i,attrs:[].slice.call(i.attributes)}),!1;if(s=Nt(i),l&&(K(i,"virtualized")&&i.parentElement.removeChild(i),s||K(i,"virtualized")||K(i,"loopVirtual")||(s={tmpl:i.outerHTML})),s&&(i!==t||e)){var u=K(i,f);if(!l||u)return u&&l&&Ot("Virtual tags shouldn't be used together with the \""+f+'" attribute - https://github.com/riot/riot/issues/2511'),r.push(Dt(s,{root:i,parent:n},i.innerHTML,n)),!1;j(i,"virtualized",!0);var d=_e({tmpl:i.outerHTML},{root:i,parent:n},i.innerHTML);r.push(d)}ge.apply(n,[i,i.attributes,function(t,e){e&&r.push(e)}])}}),r}function ge(t,e,n){var r=this;gt(e,function(e){if(!e)return!1;var i,o=e.name,a=pt(o);vt(u,o)&&t.tagName.toLowerCase()!==s?i=ce(t,r,o,e.value):D.hasExpr(e.value)&&(i={dom:t,expr:e.value,attr:o,bool:a}),n(e,i)})}function me(t){var e=this.__,n=e.isAnonymous,r=e.skipAnonymous;yt(this,"isMounted",t),n&&r||(t?this.trigger("mount"):(this.trigger("unmount"),this.off("*"),this.__.wasCreated=!1))}function _e(t,e,n){void 0===t&&(t={}),void 0===e&&(e={});var r,o=e.context||{},s=e.opts||{},u=e.parent,f=e.isLoop,c=!!e.isAnonymous,p=X.skipAnonymousTags&&c,d=e.item,h=e.index,v=t.tmpl,g=[],_=e.root,b=e.tagName||Et(_),y="virtual"===b,w=!y&&!v;return w||f&&c?r=_:(y||(_.innerHTML=""),r=zt(v,n,ft(_))),p||R(o),t.name&&_._tag&&_._tag.unmount(!0),yt(o,"__",{impl:t,root:_,skipAnonymous:p,implAttrs:[],isAnonymous:c,instAttrs:[],innerHTML:n,tagName:b,index:h,isLoop:f,isInline:w,item:d,parent:u,listeners:[],virts:[],wasCreated:!1,tail:null,head:null}),[["isMounted",!1],["_riot_id",bt()],["root",_],["opts",s,{writable:!0,enumerable:!0}],["parent",u||null],["tags",{}],["refs",{}],["update",function(t){return function(t,e,n){var r=t.__,i={},o=t.isMounted&&!r.skipAnonymous;return r.isAnonymous&&r.parent&&$(t,r.parent),$(t,e),kt.apply(t,[r.isLoop,r.parent,r.isAnonymous,i,r.instAttrs]),o&&t.isMounted&&lt(t.shouldUpdate)&&!t.shouldUpdate(e,i)?t:($(t.opts,i),o&&t.trigger("update",e),$t.call(t,n),o&&t.trigger("updated"),t)}(o,t,g)}],["mixin",function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];return gt(e,function(e){var n,r,i=[],o=["init","__proto__"];e=dt(e)?ee(e):e,n=lt(e)?new e:e;var s=Object.getPrototypeOf(n);do{i=i.concat(Object.getOwnPropertyNames(r||n))}while(r=Object.getPrototypeOf(r||n));gt(i,function(e){if(!vt(o,e)){var r=q(n,e)||q(s,e),i=r&&(r.get||r.set);!t.hasOwnProperty(e)&&i?Object.defineProperty(t,e,r):t[e]=lt(n[e])?n[e].bind(t):n[e]}}),n.init&&n.init.bind(t)(t.opts)}),t}.apply(void 0,[o].concat(t))}],["mount",function(){return function(t,e,n,r){var i=t.__,o=i.root;o._tag=t,ge.apply(i.parent,[o,o.attributes,function(e,n){!i.isAnonymous&&fe.isPrototypeOf(n)&&(n.tag=t),e.expr=n,i.instAttrs.push(e)}]),tt(i.impl.attrs,function(t,e){i.implAttrs.push({name:t,value:e})}),ge.apply(t,[o,i.implAttrs,function(t,e){e?n.push(e):j(o,t.name,t.value)}]),kt.apply(t,[i.isLoop,i.parent,i.isAnonymous,r,i.instAttrs]);var s=ee(a);if(s&&!i.skipAnonymous)for(var l in s)s.hasOwnProperty(l)&&t.mixin(s[l]);if(i.impl.fn&&i.impl.fn.call(t,r),i.skipAnonymous||t.trigger("before-mount"),gt(ve.apply(t,[e,i.isAnonymous]),function(t){return n.push(t)}),t.update(i.item),!i.isAnonymous&&!i.isInline)for(;e.firstChild;)o.appendChild(e.firstChild);if(yt(t,"root",o),!i.skipAnonymous&&t.parent){var u=xt(t.parent);u.one(u.isMounted?"updated":"mount",function(){me.call(t,!0)})}else me.call(t,!0);return t.__.wasCreated=!0,t}(o,r,g,s)}],["unmount",function(t){return function(t,e,n){var r=t.__,o=r.root,s=i.indexOf(t),a=o.parentNode;if(r.skipAnonymous||t.trigger("before-unmount"),tt(r.impl.attrs,function(t){mt(t,l)&&(t=t.slice(l.length)),V(o,t)}),t.__.listeners.forEach(function(t){Object.keys(t[m]).forEach(function(e){t.removeEventListener(e,t[m][e])})}),-1!==s&&i.splice(s,1),r.parent&&!r.isAnonymous){var u=xt(r.parent);r.isVirtual?Object.keys(t.tags).forEach(function(e){return Rt(u.tags,e,t.tags[e])}):Rt(u.tags,r.tagName,t)}return t.__.virts&&gt(t.__.virts,function(t){t.parentNode&&t.parentNode.removeChild(t)}),pe(n),gt(r.instAttrs,function(t){return t.expr&&t.expr.unmount&&t.expr.unmount()}),e?I(o,""):a&&a.removeChild(o),r.onUnmount&&r.onUnmount(),t.isMounted||me.call(t,!0),me.call(t,!1),delete o._tag,t}(o,t,g)}]].reduce(function(t,e){var n=e[0],r=e[1],i=e[2];return yt(o,n,r,i),t},$(o,d))}function be(t,e,n,r){var s,a=o[e],l=o[e].class,u=r||(l?k(l.prototype):{}),f=t._innerHTML=t._innerHTML||t.innerHTML,c=$({root:t,opts:n,context:u},{parent:n?n.parent:null});return a&&t&&(s=_e(a,c,f)),s&&s.mount&&(s.mount(!0),vt(i,s)||i.push(s)),s}var ye=Object.freeze({arrayishAdd:Ct,getTagName:Et,inheritParentProps:Mt,mountTo:be,selectTags:Xt,arrayishRemove:Rt,getTag:Nt,initChildTag:Dt,moveChildTag:oe,makeReplaceVirtual:Zt,getImmediateCustomParentTag:xt,makeVirtual:qt,moveVirtual:se,unmountAll:pe,createIfDirective:he,createRefDirective:ce}),we=X,Oe={tmpl:D,brackets:W,styleManager:T,vdom:i,styleNode:T.styleNode,dom:ot,check:ht,misc:Lt,tags:ye},Le=Yt,Ce=Gt,Ne=Jt,Ee=Kt,Me=ee,Se=ne,Fe=re,Ae=R,Be=$({},ie,{observable:R,settings:we,util:Oe});t.settings=we,t.util=Oe,t.Tag=Le,t.tag=Ce,t.tag2=Ne,t.mount=Ee,t.mixin=Me,t.update=Se,t.unregister=Fe,t.version="v3.13.2",t.observable=Ae,t.default=Be,Object.defineProperty(t,"__esModule",{value:!0})}(e)},function(t,e,n){"use strict";function r(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return fetch(t,{method:"POST",mode:"cors",cache:"no-cache",credentials:"same-origin",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(t){return t.json()})}n.r(e);var i={getCustomFields:function(){return r("/api/custom-fields",{board_id:window.localStorage.getItem("board-id")})},getCards:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e={board_id:window.localStorage.getItem("board-id")};return t&&(e.filter_by=t),r("/api/cards",e)},processCards:function(t){var e=[];return void 0===t?e:(Object.entries(t).forEach(function(t){var n={},r=[];t[1].forEach(function(t){var e=[];Object.entries(t._custom_fields).forEach(function(t){e.push({name:t[0],value:t[1]})}),r.push({name:t._name,url:t._url,customFields:e})}),n.name=t[0],n.cards=r,e.push(n)}),e)}};e.default=i},function(t,e,n){n(3),t.exports=n(1)},function(t,e,n){"use strict";n.r(e);var r=n(0),i=n.n(r),o=(n(4),n(5),n(6),n(1));i.a.mixin("trello-utils",o.default),i.a.store=new function(){i.a.observable(this)},i.a.mount("*")},function(t,e,n){!function(t,e){"use strict";var n="isMounted opts".split(" ");function r(t){e.util.styleManager.inject();for(var i=document.querySelectorAll(t+", [data-is="+t+"]"),o=[],s=0;s<i.length;s++){var a,l=i[s],u=l._tag;r.trigger("before-unmount",u),u.unmount(!0),l.innerHTML=u.__.innerHTML,(u.__.instAttrs||[]).map(function(t){l.setAttribute(t.name,t.value)});var f={};for(p in u.opts)f[p]=u.opts[p];f.parent=u.parent,r.trigger("before-mount",f,u);var c=e.mount(l,f)[0];for(var p in u)a=u[p],~n.indexOf(p)||(c[p]=a);c.update(),o.push(c),r.trigger("after-mount",c,u)}return o}e.observable(r),e.reload=r,e.default&&(e.default.reload=r),t.reload=r,t.default=r,Object.defineProperty(t,"__esModule",{value:!0})}(e,n(0))},function(t,e,n){var r=n(0);r.tag2("filter",'<div if="{board_id !=null}" class="funi-filter-info"> <span class="funi-filter-info-current">{selectedFilters} filters are selected</span> </div> <div class="funi-filter" each="{filter in filters}"> <p class="funi-filter-name">{filter.name}:</p> <select class="funi-filter-values" multiple> <option class="{filter.name}" value="0"> No filter </option> <option class="{filter.name}" each="{option in filter.options}" riot-value="{option}"> {option} </option> </select> </div> <div if="{board_id !=null}" ref="loadingFilter" id="loading-filter"><img src="/static/svg/spinner.svg"></div> <button if="{board_id !=null}" ref="applyFilter" onclick="{this.applyFilter}" id="apply-filter" disabled="disabled">Apply filter</button>','filter .loading img,[data-is="filter"] .loading img{ width: 50px; display: block; margin: auto; } filter .funi-filter-info .funi-filter-info-current,[data-is="filter"] .funi-filter-info .funi-filter-info-current{ font-weight: bold; color: blue; margin: 0 20px; } filter .funi-filter,[data-is="filter"] .funi-filter{ display: inline-block; } filter .funi-filter .funi-filter-name,[data-is="filter"] .funi-filter .funi-filter-name{ font-size: 12px; font-weight: bold; text-align: center; } filter .funi-filter .funi-filter-values,[data-is="filter"] .funi-filter .funi-filter-values{ height: 250px; margin: 0 25px; min-width: 150px; padding: 10px; }',"",function(t){this.board_id=localStorage.getItem("board-id"),this.mixin("trello-utils"),this.selectedFilters="No";var e=this;r.default.store.on("hide-loading",()=>{this.refs.loadingFilter&&(this.refs.loadingFilter.style.display="none")}),r.default.store.on("show-loading",()=>{this.refs.loadingFilter&&(this.refs.loadingFilter.style.display="block")}),r.default.store.on("activate-filter-button",()=>{this.refs.applyFilter&&(this.refs.applyFilter.disabled=!1)}),this.load_custom_fields=function(){null!=e.board_id&&this.getCustomFields().then(t=>{let n=[];Object.entries(t).forEach(t=>{n.push({name:t[0],options:t[1]})}),e.filters=n,e.update()})},this.applyFilter=function(){r.default.store.trigger("show-loading"),document.getElementById("apply-filter").disabled="disabled";let t=[];Array.from(document.getElementsByClassName("funi-filter-values")).forEach(e=>{Array.from(e.selectedOptions).forEach(e=>{t.push(e)})}),this.filter(t)},this.filter=function(t){var e=[];Array.from(t).filter(t=>0!==t.value).forEach(t=>{e.push({name:t.className,value:t.value})}),this.getCards(e).then(t=>{r.default.store.trigger("filter-applied",this.processCards(t))});let n="";e.forEach(t=>{n+=t.value+" + "}),n=0===n.length?"No":n.slice(0,-3),this.selectedFilters=n,this.update()},r.default.store.on("board-id-update",t=>{e.board_id=t,e.update(),e.load_custom_fields()}),this.load_custom_fields()})},function(t,e,n){var r=n(0);r.tag2("board",'<div id="trello-lists" ref="trelloLists" class="trello-lists"> <div class="trello-lists-item" each="{list in lists}"> <span class="trello-lists-item-title">{list.name}</span> <div class="trello-lists-item-content"> <div class="card-info" each="{card in list.cards}"> <p class="card-info-custom-field" each="{customField in card.customFields}">{customField.name} -> {customField.value}</p> <a href="{card.url}">{card.name}</a> </div> </div> </div> <div show="{board_id==null}"> <input type="text" ref="boardIdValue" placeholder="Board Id"> <button onclick="{update_board_id}">Update Board Id!</button> </div> </div> </div>','board .trello-lists .trello-lists-item,[data-is="board"] .trello-lists .trello-lists-item{ display: inline-block; margin: 20px; width: 300px; vertical-align: top; } board .trello-lists .trello-lists-item .trello-lists-item-title,[data-is="board"] .trello-lists .trello-lists-item .trello-lists-item-title{ font-weight: bold; text-align: center; min-height: 50px; } board .trello-lists .trello-lists-item .trello-lists-item-content,[data-is="board"] .trello-lists .trello-lists-item .trello-lists-item-content{ margin: 12px 0; min-height: 150px; } board .trello-lists .trello-lists-item .trello-lists-item-content .card-info,[data-is="board"] .trello-lists .trello-lists-item .trello-lists-item-content .card-info{ border: 1px solid black; margin: 5px; } board .trello-lists .trello-lists-item .trello-lists-item-content .card-info .card-info-custom-field,[data-is="board"] .trello-lists .trello-lists-item .trello-lists-item-content .card-info .card-info-custom-field{ font-size: 10px; }',"",function(t){let e=this;this.mixin("trello-utils"),this.board_id=localStorage.getItem("board-id"),this.load_cards=function(){null!=e.board_id&&(r.default.store.trigger("show-loading"),this.getCards().then(t=>{e.updateBoard(this.processCards(t))}))},this.update_board_id=function(t){t.preventDefault(),this.refs.boardIdValue.value&&0!==this.refs.boardIdValue.value.length&&(window.localStorage.setItem("board-id",this.refs.boardIdValue.value),e.board_id=this.refs.boardIdValue.value,e.update(),r.default.store.trigger("board-id-update",this.refs.boardIdValue.value),e.load_cards())},this.updateBoard=function(t){e.lists=t,e.update(),r.default.store.trigger("hide-loading"),r.default.store.trigger("activate-filter-button")},r.default.store.on("filter-applied",function(t){e.updateBoard(t)}),this.on("updated",function(){e.board_id&&this.recalculateBoardWidth()}),this.recalculateBoardWidth=function(){this.refs.trelloLists.style.width=this.refs.trelloLists.getElementsByClassName("trello-lists-item").length*this.calculateElementWidth(this.refs.trelloLists.getElementsByClassName("trello-lists-item")[0])+"px"},this.calculateElementWidth=function(t){if(void 0===t)return 0;const e=t.currentStyle||window.getComputedStyle(t);return t.offsetWidth+(parseFloat(e.marginLeft)+parseFloat(e.marginRight))-(parseFloat(e.paddingLeft)+parseFloat(e.paddingRight))+(parseFloat(e.borderLeftWidth)+parseFloat(e.borderRightWidth))},this.load_cards()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,